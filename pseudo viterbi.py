def viterbi(s, states, trans_probs, emis_probs, trace=False, smoothing=False):
    '''
    добавляем в словарь вероятностей эмиссии единицы для начала предложения и конца предложения
    создаём пустой список vit (это будет список списков)
    создаём пустой словарь bp (это будут бэкпоинтеры)
    разбиваем строку s на токены, прибавляем символ начала и конца предложения
    создаём список prev_probs, чтобы хранить вероятности предыдущего столбца из таблицы Витерби
    порядок вероятностей в этом списке соответствует порядку следования состояний в states
    вероятность спец. состояния '[START]' в prev_probs – 1.0, остальные вероятности пока равны нулю
    проходим по токенам и их индексам, начинаем с первой позиции (не с нулевой, это '[START]'):
        добавляем в vit новый пустой список (это будет новый столбец в таблице)
        проходим по всем состояниям:
            создаём пустой список probs, в нём будут храниться вероятности для текущей ячейки таблицы (список может иметь различное количество элементов)
            проходим по предыдущим вероятностям (prev_probs), индексы тоже запоминаем:
                считаем вероятность перехода из предыдущего состояния в текущее
                считаем вероятность эмиссии из текущего состояния текущего слова
                считаем произведение: предыдущая вероятность из prev_probs * вер. перехода * вер. эмиссии; добавляем это число в probs
            запоминаем в bp, где (какое состояние, какая позиция) и как (из какого состояния "пришли", из какой позиции) мы получили максимальное значение v
            добавляем в последний столбец из vit новое значение (максимальное от probs)
        prev_probs - это последний столбец из vit
    "разматываем бэкпоинтеры": начинаем с конечного состояния, проходя с конца списка токенов до начала, заглядываем в словарь bp, чтобы понять, откуда мы пришли на каждом шаге, запоминаем последовательность состояний в список res_states
    обращаем порядок следования элементов в res_states
    возвращаем res_states
    '''